package org.xiph.system;
import flash.errors.ArgumentError;
import flash.errors.Error;
import flash.events.EventDispatcher;
import flash.Vector;
import haxe.Timer;
import org.xiph.common.System;

/**
 * Bytes RingBuffer...
 * 指定した長さのバイト単位のリングバッファを生成する。
 * グリーンラインとレッドラインが存在し、それぞれのライン以上のバイトが蓄積した場合、コールバックの実行とイベントが発行される。
 * グリーンラインは最低蓄積ライン。レッドラインは最大蓄積ラインとして使用する。
 * writeメソッドでデータを書き込む。
 * もし、length以上のデータを書き込む場合、自動的にオーバーフロー用バッファに書き込まれる。
 * オーバーフロー用バッファは可変長で、上限はない。※メモリ使用量に注意すること。オーバーフローしないことが望ましい。
 * また、オーバーフローに書き込んだ場合、オーバーフローイベントが発行される。
 * readメソッドでは指定したByteArrayにデータを書き込む。
 * readメソッドが呼ばれバッファに空きが出来るたびに、オーバーフローからバッファへデータを移動する。
 * オーバーフローからデータを移動し、オーバーフローが空になった場合、オーバーフローエンプティイベントが発行される。
 * bytesAvailableプロパティで、バッファ内のデータ量を取得できる。この値にはオーバーフロー内のデータも含まれる。
 * positionプロパティはデータの先頭の位置を示す。
 * 
 * @author tudurao jin
 */

class RingBuffer extends EventDispatcher
{
	private var _buff:Bytes;
	private var _overflowBuff:Bytes; 
	private var _GreenLine:UInt; 	//Minimum accumulated amount.
    private var _RedLine:UInt; 		//Accumulated maximum amount.
	private var _length:UInt; 		//The buffer length.
    private var _position: UInt;
    private var _buffAvailable: UInt;
	
	/**
	 * Constructor
	 * @param	inLength  buffer length. Must be greater than GreenLine and RedLine.
	 * @param	inGreenLine  GreenLine = 0.
	 * @param	inRedLine  RedLine = 0. Must be greater than GreenLine.
	 */
    public function new( inLength:UInt , inGreenLine:UInt = 0 , inRedLine:UInt = 0 )
	{
		super();
		this.setLength( inLength , inGreenLine , inRedLine );
		
		if ( _GreenLine <= _RedLine && _RedLine <= _length )
		{			
			this._buff = new Bytes();
			this._overflowBuff = new Bytes();
			this._position = 0;
			this._buffAvailable = 0;
		}else{
			throw new ArgumentError("[RingBuffer] <constructor> parameter error. not size is GreenLine < RedLine < length");
		}
    }
	
	/**
	 * set up the buffer length.
	 * @param	inLength  buffer length. Must be greater than GreenLine and RedLine.
	 * @param	inGreenLine  GreenLine = 0.
	 * @param	inRedLine  RedLine = 0. Must be greater than GreenLine.
	 * @eventType OVER_GREENLINE
	 * @eventType OVER_REDLINE
	 * @eventType UNDER_GREENLINE
	 * @eventType UNDER_REDLINE
	 */
    public function setLength( inLength:UInt , inGreenLine:UInt = 0 , inRedLine:UInt = 0 ):Void
	{
		this._length = inLength;
		if ( inGreenLine == 0 ) {	this.greenLine = cast(_length * 0.5 , UInt);	}
		else {		this.greenLine = inGreenLine;	}
		if ( inRedLine == 0 ) {	this.redLine = cast(_length * 0.8 , UInt);	}
		else{     this.redLine = inRedLine;	}
	}

	/**
	 * get data tail position in buffer.
	 * @return (Int) tail position.
	 */
	private function getTail():Int
	{
		var pos:UInt = 0;
		if ( cast(this._position + this._buffAvailable ,UInt) > this._length )
		{
			pos = (( this._position + this._buffAvailable ) - this._length );
		}
		else
		{
			pos = ( this._position + this._buffAvailable );
		}
		pos = pos % this._length;
		return pos;
	}
	
	
	/**
	 * write data.
	 * @param	inData  The data to be written
	 * @param	inLength  The length of the data to be written
	 * @param	inOffset  Position at the beginning of the data to be written
	 * @return return value is length of  write data. if value is minus mean overflow.
	 * @eventType WRITE_OVERFLOW
	 */
	public function write( inData:Bytes , inLength:UInt , inOffset:UInt = 0):Int
	{
		var write_len:UInt = inLength;
		var over_len:UInt = 0;
		
		//Check if the overflow size to write.
		if ( this._length - this._buffAvailable < Std.int(write_len) )
		{
			//Extract size overflow
			write_len = (this._length - this._buffAvailable);
			over_len = inLength - write_len;
		}
		
		this._buff.position = getTail();		//move position.
		
		if ( write_len != 0 )
		{
			//write.
			var tail_len:UInt = this._length - this._position;
			if ( tail_len < write_len )
			{
				//rotate.
				this._buff.writeBytes( inData , inOffset, tail_len );
				this._buff.position = 0;
				this._buff.writeBytes( inData , inOffset + tail_len , write_len - tail_len );
			}else{
				//not rotate.
				this._buff.writeBytes( inData , inOffset, write_len );
			}
		}
		
		//Callback execution and dispatch events
		var oldAvail:UInt = _buffAvailable;
		this._buffAvailable += write_len;
		this.checkOverLine( oldAvail , _buffAvailable );
		
		//write overflow
		if ( over_len != 0 )
		{
			this._overflowBuff.position = this._overflowBuff.length;
			this._overflowBuff.writeBytes( inData , inOffset + write_len , over_len );
			this._overflowBuff.position = 0;
			//dispatch the overflow event.
			this.dispatchEvent( new RingBufferEvent( RingBufferEvent.WRITE_OVERFLOW ));
			return -( write_len + over_len ); //value is minus.
		}
		
		return write_len;
	}
	
	/**
	 * read the bytes to dst.
	 * @param	dst It is into which the data is read.
	 * @param	inLen　 The length of the data to be read
	 * @return true = read is success. false = read is failed.
	 */
    public function read(dst : Bytes, inLen : UInt) : Bool 
	{
		if ( this.bytesAvailable < inLen ) {	return false;	}
		var read_len:UInt = inLen;
		var over_len:UInt = 0;
		//Check read the overflow
		if ( this._buffAvailable < inLen )
		{
			over_len = inLen - this._buffAvailable;
			read_len = this._buffAvailable;
		}
		
		var tail_len:UInt = (this._length - this._position);
		if ( tail_len < this._buffAvailable && tail_len < read_len  )
		{
			dst.writeBytes( this._buff , this._position , tail_len ); //read tail data
			dst.writeBytes( this._buff , 0 , (read_len - tail_len) ); //read head data
			this._position = (read_len - tail_len);			//move position
		}else {
			dst.writeBytes( this._buff , this._position , read_len );	
			this._position += read_len;			//move position
			this._position = this._position % this._length; //If the end position, then move to the top.
		}
		
		var oldAvail:UInt = this._buffAvailable;
		this._buffAvailable -= read_len;
		
		if ( over_len != 0)
		{
			//read from overflow
			dst.writeBytes( _overflowBuff , 0 , over_len );
			
			//resize overflow
			System.bytescopy( this._overflowBuff , over_len , this._overflowBuff , 0 , _overflowBuff.length - over_len );
			this._overflowBuff.length = _overflowBuff.length - over_len;
			this._overflowBuff.position = 0;
			if ( this._overflowBuff.length == 0 ) {
				this._overflowBuff.clear();
				dispatchEvent( new RingBufferEvent( RingBufferEvent.READ_OVERFLOW_EMPTY ));
			}else {
				this.shiftOverFlows();
			}
		}
		else 
		{
			this.shiftOverFlows();
		}
		
		//Callback execution and dispatch events
		this.checkUnderLine( oldAvail , this._buffAvailable );
	
        return true;
    }
	
	/**
	 * 	overflow's data move to the buffer.
	 */
	private function shiftOverFlows():Void
	{
		if ( _overflowBuff.length == 0 ) {	return;	}
		trace("[RingBuffer] <shiftOverFlows>");
		
		var write_len:UInt = this._overflowBuff.length;
		
		//オーバーフローのデータより大きいなら書き込める分を取り出す。if greater than the data in the overflow.
		if ( this._length - this._buffAvailable <  Std.int(write_len) )
		{
			write_len = this._length - this._buffAvailable;
		}
		
		//writeメソッドにオーバーフローを指定 write buffer from overflow.
		this.write( this._overflowBuff ,  write_len );
		
		//resize overflow
		System.bytescopy( this._overflowBuff , write_len , this._overflowBuff , 0 , _overflowBuff.length - write_len );
		this._overflowBuff.length = _overflowBuff.length - write_len;
		this._overflowBuff.position = 0;
		if ( this._overflowBuff.length == 0)
		{
			this._overflowBuff.clear();	
			dispatchEvent( new RingBufferEvent( RingBufferEvent.READ_OVERFLOW_EMPTY ));
		}
	}
	
	/**
	 * clear data.
	 */
	public function clear():Void
	{
		this._buff.clear();
		this._overflowBuff.clear();
		this._position = 0;
		this._buffAvailable = 0;
	}
	
	//=============================================//
	//             callback / event                //
	
	//callbacks
	public var over_GreenLine_cb(null, default) : Void -> Void;
	public var over_RedLine_cb(null, default) : Void -> Void;
	public var under_GreenLine_cb(null, default) : Void -> Void;
	public var under_RedLine_cb(null, default) : Void -> Void;
	
	/**
	 * check and excute OverLine callback / dispatch OverLine event.
	 * @param	oldBytes
	 * @param	newBytes
	 */
	private function checkOverLine( oldBytes:UInt , newBytes:UInt ):Void
	{
		if ( oldBytes < _GreenLine && _GreenLine <= newBytes )
		{
			if ( over_GreenLine_cb != null ) {	over_GreenLine_cb();	}
			dispatchEvent( new RingBufferEvent( RingBufferEvent.OVER_GREENLINE ));
		}
		if ( oldBytes < _RedLine && _RedLine <= newBytes )
		{
			if ( over_RedLine_cb != null ) {	over_RedLine_cb();	}
			dispatchEvent( new RingBufferEvent( RingBufferEvent.OVER_REDLINE ));
		}
	}
	
	/**
	 * check and excute UnderLine callback / dispatch UnderLine event.
	 * @param	oldBytes
	 * @param	newBytes
	 */
	private function checkUnderLine( oldBytes:UInt , newBytes:UInt ):Void
	{
		if ( _RedLine <= oldBytes && newBytes < _RedLine )
		{
			if ( under_RedLine_cb != null ) {	under_RedLine_cb();	}
			dispatchEvent( new RingBufferEvent( RingBufferEvent.UNDER_REDLINE ));
		}
		if ( _GreenLine <= oldBytes && newBytes < _GreenLine )
		{
			if ( under_GreenLine_cb != null ) {	under_GreenLine_cb();	}
			dispatchEvent( new RingBufferEvent( RingBufferEvent.UNDER_GREENLINE ));
		}
	}
	
	//             callback / event                //
	//=============================================//
	
	//=============================================//
	//             Getter / Setter                 //
	
	private function get_bytesAvailable():UInt {		return _buffAvailable + _overflowBuff.length;	}
	public var bytesAvailable(get_bytesAvailable, null):UInt;
	private function get_position():UInt {	return _position;	}
	public var position(get_position, null):UInt;
	
	private function get_length():UInt {	return _length;	}
	private function set_length(value:UInt):UInt 
	{
		var newBytes:Bytes = new Bytes();
		var newOverBytes:Bytes = new Bytes();
		var tail_len:UInt = (this._length - this._position);
		
		//check spill data
		var spill_data:UInt = 0;
		if ( value < this._buffAvailable ) 
		{
			spill_data = _buffAvailable - value;
			trace("[RingBuffer] <set_length> spill data. spill = " + Std.string(spill_data));
		}
		
		//copy buff data to new
		if ( tail_len < cast(_buffAvailable - spill_data , UInt) )
		{
			//rotate 
			newBytes.writeBytes( _buff , this._position , tail_len );
			newBytes.writeBytes( _buff , 0 ,  (( _buffAvailable - spill_data ) - tail_len ) );
			//shift spill data to newOverBuff
			if ( 0 < spill_data )
			{
				newOverBytes.writeBytes( _buff , (( _buffAvailable - spill_data ) - tail_len ) , spill_data );
			}
		}else {
			//not rotate
			newBytes.writeBytes( _buff , this._position , (_buffAvailable - spill_data) );
			//shift spill data to newOverBuff
			if ( 0 < spill_data )
			{
				var spill_tail:UInt = _length - (_position + (_buffAvailable - spill_data));
				if ( spill_tail < spill_data ) 
				{
					//spill rotate
					newOverBytes.writeBytes( _buff , ( _position + (_buffAvailable - spill_data)) , spill_tail ); //write spill_tail
					newOverBytes.writeBytes( _buff , 0 , spill_data - spill_tail );					//write spill_head
				}else{
					newOverBytes.writeBytes( _buff , ( _position + (_buffAvailable - spill_data)) , spill_data );
				}
			}
		}
		newBytes.position = 0;
		
		//copy OverBuff data to new
		if ( 0 < _overflowBuff.length )
		{
			newOverBytes.position = spill_data;
			newOverBytes.writeBytes( _overflowBuff , 0 , _overflowBuff.length );
		}
		newOverBytes.position = 0;
		
		//swap buffer
		this._buff.clear();
		this._buff = null;
		this._buff = newBytes;
		this._overflowBuff.clear();
		this._overflowBuff = null;
		this._overflowBuff = newOverBytes;
		
		this._position = 0;
		this._buffAvailable = newBytes.length;
		var old:UInt = this._length;
		this._length = value; //change length
		//check line
		if ( value < this._GreenLine ){			this.greenLine = value;		}
		if ( value < this._RedLine ) {			this.redLine = value;		}
		
		//if grow up length , shift OverFlows
		if ( old < value )
		{
			shiftOverFlows();
		}
		
		return _length;
	}
	public var length(get_length, set_length):UInt;	
	
	private function get_GreenLine():UInt {	return _GreenLine;	}
	private function set_GreenLine(value:UInt):UInt 
	{
		if ( this.length < value ) {	value = this.length; }
		var oldLen:UInt = this._GreenLine;
		this._GreenLine = value;
		
		if ( value < oldLen )
		{
			//over check
			if ( this._buffAvailable < oldLen && value <= this._buffAvailable )
			{
				if ( over_GreenLine_cb != null ) {	over_GreenLine_cb();	}
				dispatchEvent( new RingBufferEvent( RingBufferEvent.OVER_GREENLINE ));
			}
		}
		else
		{
			//under check
			if ( oldLen <= this._buffAvailable && this._buffAvailable < value )
			{
				if ( under_GreenLine_cb != null ) {	under_GreenLine_cb();	}
				dispatchEvent( new RingBufferEvent( RingBufferEvent.UNDER_GREENLINE ));
			}
		}
		
		return _GreenLine;
	}
	
	public var greenLine(get_GreenLine, set_GreenLine):UInt;
	
	private function get_RedLine():UInt {		return _RedLine;	}
	private function set_RedLine(value:UInt):UInt 
	{
		if ( this.length < value ) {	value = this.length; }
		var oldLen:UInt = this._RedLine;
		this._RedLine = value;
		
		if ( value < oldLen )
		{
			//over check
			if ( this._buffAvailable < oldLen && value <= this._buffAvailable )
			{
				if ( over_RedLine_cb != null ) {	over_RedLine_cb();	}
				dispatchEvent( new RingBufferEvent( RingBufferEvent.OVER_REDLINE ));
			}
		}
		else
		{
			//under check
			if ( oldLen <= this._buffAvailable && this._buffAvailable < value )
			{
				if ( under_RedLine_cb != null ) {	under_RedLine_cb();	}
				dispatchEvent( new RingBufferEvent( RingBufferEvent.UNDER_REDLINE ));
			}
		}
		
		return _RedLine;
	}
	
	public var redLine(get_RedLine, set_RedLine):UInt;
	
	//             Getter / Setter                 //
	//=============================================//

}