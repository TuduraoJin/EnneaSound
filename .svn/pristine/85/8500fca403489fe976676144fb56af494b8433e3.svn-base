package org.xiph.frontend;

import flash.events.Event;
import flash.events.ProgressEvent;
import flash.events.SampleDataEvent;
import flash.media.SoundLoaderContext;
import flash.media.SoundTransform;
import flash.utils.ByteArray;
import haxe.Timer;
import org.xiph.system.OggDecoder;
import org.xiph.system.OggDecoderEvent;
import org.xiph.system.OggUtil;

/**
 * OggDecoderを使用するChannelクラス...
 * Oggの再生を制御するクラス。
 * Sound.SAMPLE_DATA_EVENTを用いて、リアルタイムにデコードしたOggデータを再生する。
 * 
 * 処理の流れ。
 * OGGクラスから渡された音楽のバイナリをデコーダーに渡す。
 * デコーダがロードし終わったら、ヘッダー処理を行う。
 * ヘッダー処理完了後、オフセットの位置にシークを行う。
 * シーク完了後、デコードを開始しバッファにPCMデータを格納。
 * PCMデータが一定量溜まったら、再生を開始。
 * Sound.SAMPLE_EVENT_DATAハンドラで、バッファのデータを読み出す。
 * 以降、逐次デコーダーがバッファにPCMデータを蓄積する。
 * 
 * @author tudurao jin
 */

class OGGVorbisChannel extends BaseSoundChannel
{
	private var _dec:OggDecoder;
	private var _s : flash.media.Sound;
    private var _sch : flash.media.SoundChannel;
	private var _bufferTime:Int;
	private var _loopCount:Int = 0;
	private var _playLength:Float = 0;
	public var samples_chunksize(default, default):Int = 8192;
	public var seekQuality:Bool = false; //false = page seek. true = seek.
	
	/**
	 * Constructor
	 * @param	data sound binary data. 音のバイナリデータ。
	 * @param	offset 再生開始位置。ループ再生の場合、毎回オフセットの位置から再生される。
	 * @param	volume 音量。 0(min) - 1.0(max)
	 * @param	pan パン。 -1(left) - 0(center) - 1(right)
	 * @param	?loop Loop count. 0 or 1 = once. If more, The number of times to play.ループ回数。0,1なら1回再生。それ以上の場合、数字の回数分再生する。
	 * @param	?slc used to buffer the size of the decoder.　デコーダーのバッファサイズに用いる。
	 */
	public function new(data:ByteArray, offset:Float, volume:Float, pan:Float , ?loop:Int = 0 , ?bufferTime:Int = 1000 ) 
	{
        super();
		this._bufferTime = bufferTime;
		_dec = new OggDecoder( _bufferTime );
		var ret:Bool = false;
		ret = _dec.load( data , false );
		//trace("[OGGVorbisChannel] <new> load() ret=" + Std.string(ret));
		//set EventListener.  //check: not useWeekReference
		this._dec.addEventListener(OggDecoderEvent.HEADER_PROCESS_COMPLETE, decHeaderCompleteHandler );
		this._dec.addEventListener(OggDecoderEvent.BUFFER_STOREUP_OK, decBufferStoreUpOKHandler );
		this._dec.addEventListener(OggDecoderEvent.DECODE_EOF , decDecodeEOFHandler );
		this._dec.addEventListener(OggDecoderEvent.SEEK_COMPLETE , decSeekCompleteHandler );
		
        _s = new flash.media.Sound();
        _sch = null;
        _s.addEventListener(SampleDataEvent.SAMPLE_DATA, sndSampleDataHandler );
		
		this._st = new SoundTransform( volume , pan );
		this._offset = offset;
		this.loop = loop;
		this._playLength = OggUtil.getOggPlayLength( data );
    }
	
	/**
	 * dispose
	 * check: Please call if you want to delete an instance of this class. このクラスのインスタンスを削除する場合に呼んでください。
	 */
	public override function dispose():Void
	{
		super.dispose();
		this._dec.removeEventListener(OggDecoderEvent.HEADER_PROCESS_COMPLETE, decHeaderCompleteHandler );
		this._dec.removeEventListener(OggDecoderEvent.BUFFER_STOREUP_OK, decBufferStoreUpOKHandler );
		this._dec.removeEventListener(OggDecoderEvent.DECODE_EOF , decDecodeEOFHandler );
		this._dec.removeEventListener(OggDecoderEvent.SEEK_COMPLETE , decSeekCompleteHandler );
		this._dec.reset();
		
		_s.removeEventListener(SampleDataEvent.SAMPLE_DATA, sndSampleDataHandler );
		this._s = null;
		if ( _sch != null ) {
			_sch.removeEventListener(Event.SOUND_COMPLETE, chSoundCompleteHandler);
			_sch = null;
		}
		this.isPlayed = false;
		this._loopCount = 0;
	}
	
	/**
	 * seek to run in response to seek quality.
	 * @param	time Offset.
	 * @return Is the return value of the seek method.
	 */
	private function seek_time( time:Float ):Int
	{
		if ( seekQuality ) {	return this._dec.seek_time( time );		}
		else {	return this._dec.seek_time_page( time );	}
	}
	
	//=============================================//
	//              Sound Listhener               //

    /**
     * Sound data SAMPLE_DATA event handler.
	 * write the PCM in the buffer of the Sound class.
     * @param	event
     */
    private function sndSampleDataHandler(event : SampleDataEvent) : Void
	{
		this._dec.read( event.data , samples_chunksize );
    }
	
	/**
	 * Sound Channel SOUND_COMPLETE event handler.
	 * @param	e
	 */
    private function chSoundCompleteHandler(e:Event) {
		trace("end play pos = " + Std.string(this._sch.position ) + " length=" + Std.string(this._playLength) + " getPos=" + Std.string(this.getPosition()) );
		this.stop();
        dispatchEvent( e.clone() );
    }
	
	//              Sound Listhener               //
	//=============================================//
	
	
	//=============================================//
	//             Decoder Listhener               //
	
	/**
	 * OggDecoder HEADER_PROCESS_COMPLETE Handler.
	 * do seek the position of the offset. オフセットの位置にシークを行う。
	 * @param	e
	 */
	private function decHeaderCompleteHandler(e:OggDecoderEvent):Void 
	{
		var ret:Int = this.seek_time( this._offset );
		if ( ret < 0 ){		this._dec.seek_top();		}
	}
	
	/**
	 * OggDecoder SEEK_COMPLETE Handler.
	 * Seek after completion, I accumulate a buffer to start decoding.シーク完了後、デコードを開始しバッファを蓄積する。
	 * @param	e
	 */
	private function decSeekCompleteHandler(e:OggDecoderEvent):Void 
	{
		trace("[OGGVorbisChannel] <decSeekCompleteHandler> isPlayed=" + Std.string(this.isPlayed) );
		if ( this.isPlayed )
		{
			if ( (this._dec.isBufferOK || this._dec.isBufferMAX) && _loopCount == 0 ){
				this.playSound();		//play sound
			}else{
				this._dec.processStart(); //decode start
			}
		}
	}
	
	/**
	 * OggDecoder BUFFER_STOREUP_OK Handler.
	 * Buffer that we have accumulated, I will start playing.　バッファが蓄積したので、再生を開始する。
	 * @param	e
	 */
	private function decBufferStoreUpOKHandler(e:OggDecoderEvent):Void 
	{
		//play sound
		this.playSound();
	}
	
	/**
	 * play sound.
	 */
	private function playSound():Void
	{
		if (_sch == null && isPlayed ) {
            _sch = _s.play( 0 , 0 , this._st );
			if ( this._sch != null )
			{
				_sch.addEventListener(Event.SOUND_COMPLETE, chSoundCompleteHandler);
			}else {
				//channel max. can't create SoundChannel.
				this.stop();
			}
        }
	}
	
	/**
	 * OggDecoder DECODE_EOF handler.
	 * Decoding is completed to the end of the music. I make the decision loop.　音楽の末尾までデコードが完了した。ループ判定を行う。
	 * @param	e
	 */
	private function decDecodeEOFHandler(e:OggDecoderEvent):Void 
	{
		trace("[OGGVorbisChannel] <decDecodeEOFHandler> ");
		
		//loop
		if ( _loopCount < loop - 1 )
		{
			_loopCount++;
			var ret:Int = this.seek_time( this._offset );
			
			if ( ret < 0) {
				trace("seekTop for loop is error.");
				_loopCount = loop - 1;
			}
		}
	}

	//             Decoder Listhener               //
	//=============================================//
	
	
	//=============================================//
	//              Sound Control                  //
	
	/**
	 * start process.
	 */
	public override function play(?inOffset:Float, ?inVol:Float, ?inPan:Float, ?inLoop:Int):Void 
	{
		super.play( inOffset, inVol, inPan, inLoop);
		if ( isPlayed ){	this.stop();	}
		this.isPlayed = true;
		
		if ( this._dec.isHeaderProcessed ){
			this.seek_time(_offset);
		}else {
			this._dec.processHeader();
		}
	}
	
	/**
	 * stop sound.音楽の停止。
	 */
	public override function stop() : Void
	{
		if ( _sch == null )
		{
			trace("[OGGVorbisChannel] <stop> SoundChannel = null ");
		}else {
			_sch.removeEventListener(Event.SOUND_COMPLETE, chSoundCompleteHandler);
			_sch.stop();
			this._sch = null;
		}
		this.isPlayed = false;
		this._loopCount = 0;
		this._dec.processStop();
		this._dec.clearBuffer();
    }

	/**
	 * Get the current playback position.現在の再生位置を取得。
	 * @return millisecond.
	 */
    public override function getPosition() : Float 
	{
		if ( _sch != null )	
		{
			if ( 0 == loop ) {
				return this._sch.position + this._offset;
			}else{
				return (this._sch.position + ( (_loopCount + 1) * this._offset)) - ( _loopCount  * _playLength);		
			}
		}
		
        return 0;
    }
    
	/**
	 * get Volume.
	 * @return 0 - 1.0 
	 */
    public override function getVolume() : Float 
	{
		if ( _sch != null )	{	return this._sch.soundTransform.volume;		}
		return 0;
    }
    
	/**
	 * get Pan.
	 * @return  -1(left) - 0(center) - 1(right)
	 */
    public override function getPan() : Float 
	{
		if ( _sch != null )	{	return this._sch.soundTransform.pan;		}
        return 0;
    }
    
	/**
	 * set Volume.
	 * @param	volume
	 */
    public override function setVolume(volume : Float) : Void 
	{
		if ( _sch != null )	
		{
			var t : SoundTransform = this._sch.soundTransform;
			t.volume = volume;
			this._sch.soundTransform = t;
		}
    }
    
	/**
	 * set Pan.
	 * @param	pan
	 */
    public override function setPan(pan : Float) : Void 
	{
		if ( _sch != null )	
		{
			var t : SoundTransform = this._sch.soundTransform;
			t.pan = pan;
			this._sch.soundTransform = t;
		}
    }
	
	//              Sound Control                  //
	//=============================================//
	
	/**
	 * set Buffer size. wrapper OggDecoder.setBufferSize method.
	 * @param	inLen
	 * @param	inGLine
	 * @param	inRLine
	 */
	public function setBufferSize( inLen:UInt , inGLine:UInt , inRLine:UInt ):Void
	{
		this._dec.setBufferSize( inLen , inGLine , inRLine );
	}
	
}