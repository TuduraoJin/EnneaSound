package org.xiph.frontend;

import flash.events.Event;
import flash.events.IOErrorEvent;
import flash.events.ProgressEvent;
import flash.events.SecurityErrorEvent;
import flash.media.SoundLoaderContext;
import flash.net.URLRequest;
import org.xiph.frontend.BaseSoundChannel;

/**
 * The "MP3" class wraps MP3 playback support around Flash's native
 * flash.media.Sound class. MP3 is the only natively supported filetype
 * able to be stream from a server with this class.
 * 
 * @author tudurao jin
 */

class MP3 extends BaseSound {
    private var _url : URLRequest;
    private var _sound : flash.media.Sound;

    public function new(url:URLRequest , ?inSlc:SoundLoaderContext ) 
	{
        super( inSlc );
        this._url = url;
        this._sound = new flash.media.Sound( url , this.slc );
        this._sound.addEventListener(Event.COMPLETE, onComplete);
        this._sound.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurity);
        this._sound.addEventListener(IOErrorEvent.IO_ERROR, onIoError);
        this._sound.addEventListener(Event.OPEN , onOpen);
        this._sound.addEventListener(ProgressEvent.PROGRESS , onProgress);
    }
	
    //override public function play(offset:Float, volume:Float, pan:Float , ?loop:Int = 0) : BaseSoundChannel 
	override public function play(offset:Float, volume:Float, pan:Float, loop:Int = 0):BaseSoundChannel 
	{
        return new MP3Channel(this._sound, offset, volume, pan, loop);
    }
    
	private function onOpen( e:Event ):Void
	{
        dispatchEvent(e.clone());
    }

    private function onProgress(e:ProgressEvent):Void
	{
        dispatchEvent(e.clone());
    }
	
    private function onComplete(e:Event):Void
	{
		this._sound.removeEventListener(Event.COMPLETE, onComplete);
        this._sound.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurity);
        this._sound.removeEventListener(IOErrorEvent.IO_ERROR, onIoError);
        this._sound.removeEventListener(Event.OPEN , onOpen);
        this._sound.removeEventListener(ProgressEvent.PROGRESS , onProgress);
		
		this._baseID3.id3 = _sound.id3;
        dispatchEvent(e.clone());
    }

    private function onIoError(e:IOErrorEvent):Void
	{
        dispatchEvent(e.clone());
    }
	
	private function onSecurity(e:SecurityErrorEvent):Void 
	{
        dispatchEvent(e.clone());
	}
	
	override public function getURL():String  	{		return _url.url;	}
	override public function getLength() {	return this._sound.length;	}
}
